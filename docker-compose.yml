# version: '3.8'

services:
  theme_consumer:
    build: .
    command: python theme_consumer.py
    depends_on:
      - kafka
      - mysql
    networks:
      - app-network

  stock_consumer:
    build: .
    command: python stock_consumer.py
    depends_on:
      - kafka
      - mysql
    networks:
      - app-network

  producer:
    build: .
    command: python producer.py
    depends_on:
      - theme_consumer
      - stock_consumer
    networks:
      - app-network
      
  zookeeper:
    image: zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:2.13-2.7.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # Docker 내부 접근할때
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://112.161.8.195:9092 # Local에서 접근할때
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://112.161.8.195:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: naver_stock

    ports:
      - "3306:3306"
    volumes:
      - ./Data_Archive:/var/lib/mysql
    networks:
      - app-network

#   app:
#     build: .
#     volumes:
#       - .:/app
#     depends_on:
#       - kafka
#       - mysql
#     environment:
#       KAFKA_BOOTSTRAP_SERVERS: kafka:9092

# volumes:
#   db_data:

networks:
  app-network:
    driver: bridge